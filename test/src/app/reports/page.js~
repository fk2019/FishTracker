'use client';
import React, { useEffect, useState } from 'react';
import FeedingChart from '../../components/FeedingChart';
import GradingChart from '../../components/GradingChart';

export default function ReportsPage() {
  const [entries, setEntries] = useState([]);
  const [harvest, setHarvest] = useState([]);
  const [ponds, setPonds] = useState([]);
  const [pond, setPond] = useState([]);
  const [formData, setFormData] = useState({
    pond: '',
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const [stats, setStats] = useState({
    totalFeedings: 0,
    totalFeedQuantity: 0,
    averageFeedPerDay: 0,
    lastGradingAvgWeight: 'N/A',
    totalMortalities: 0, // Optional: mock for now
  });

  useEffect(() => {
    const feedingLogs = JSON.parse(localStorage.getItem('feedingData') || '[]');
    const gradingLogs = JSON.parse(localStorage.getItem('gradingData') || '[]');
    const savedPonds = JSON.parse(localStorage.getItem('ponds')) || [];
    const selectedPond = savedPonds.find(p => p.name === formData.pond) || pond;
    setPond(selectedPond || null);
    setPonds(savedPonds);

    //search harvestss
    const feedRecord = feedingLogs.find(log => log.name === selectedPond.name);
    const gradingRecord = gradingLogs.find(log => log.name === selectedPond.name);
    // ðŸŸ¦ Feeding Stats
    const totalFeedings = feedRecord.feedNumber;
    const totalFeedQuantity = feedRecord.cumulativeWeight;
    console.log(totalFeedQuantity);
    const daysSet = new Set(feedingLogs.map(log => log.date));
    const averageFeedPerDay = daysSet.size > 0 ? (totalFeedQuantity / daysSet.size).toFixed(1) : 0;

    // ðŸŸ© Grading Stats
    let lastGradingAvgWeight;
    if (gradingRecord) lastGradingAvgWeight = gradingRecord.averageWeight;
    console.log(lastGradingAvgWeight, gradingRecord);

    // ðŸŸ¥ Mortality Placeholder (future dev)
    const totalMortalities = 0;

    setStats({
      totalFeedings,
      totalFeedQuantity,
      averageFeedPerDay,
      lastGradingAvgWeight,
      totalMortalities,
    });
  }, [formData.pond]);

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-4 text-blue-900 text-bg">Reports & Insights</h1>
      <div>
      <select
    name="pond"
    value={formData.pond}
    onChange={handleChange}
            className="w-full border p-2 rounded text-sm text-blue-500 bg-white"
      >
      <option value="">-- Select Pond --</option>
      {ponds && ponds.map((p) => (
          <option key={p.name} value={p.name}>{p.name}</option>
      ))}
    </select>
      </div>
    <div>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-8">
        <StatCard title="Total Feedings" value={stats.totalFeedings} />
        <StatCard title="Total Feed (kg)" value={stats.totalFeedQuantity} />
        <StatCard title="Avg Feed/Day (kg)" value={stats.averageFeedPerDay} />
        <StatCard title="Avg Weight (Last Grading)" value={stats.lastGradingAvgWeight} />
        <StatCard title="Total Mortalities" value={stats.totalMortalities} />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="p-4 border rounded bg-white shadow">
          <h2 className="font-bold text-lg mb-2 text-gray-500">Feed Consumption Trend</h2>
          <FeedingChart feedings={pond.feedings}/>
        </div>
        <div className="p-4 border rounded bg-white shadow">
          <h2 className="font-bold text-lg mb-2 text-gray-500">Weight Gain Trend</h2>
          <GradingChart gradings={pond.gradings}/>
        </div>
      </div>
    </div>
    </div>
  );
}

function StatCard({ title, value }) {
  return (
    <div className="p-4 border rounded bg-white shadow">
      <p className="text-gray-500 text-sm">{title}</p>
      <p className="text-xl font-bold text-blue-700">{value}</p>
    </div>
  );
}
