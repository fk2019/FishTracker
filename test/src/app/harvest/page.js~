'use client';

import { useState, useEffect } from 'react';
import HarvestingChart from '../../components/HarvestingChart';
export default function HarvestingTrackerPage() {
  const [entries, setEntries] = useState([]);
  const [formData, setFormData] = useState({
    pond: '',
    date: '',
    averageWeight: '',
    totalWeight: '',
    count: '',
    species: ''
  });
  const [chartData, setChartData] = useState({
    pond: ''
  });
  const [ponds, setPonds] = useState([]);
  const [pond, setPond] = useState([]);
  useEffect(() => {
    const savedPonds = JSON.parse(localStorage.getItem('ponds'));
    setPonds(savedPonds);
  }, []);
  //select pond
  useEffect(() => {
    const selectedPond = ponds.find(p=>p.name === formData.pond);
    setPond(selectedPond || null);
  }, [formData.pond, ponds]);
  //chartdata
  useEffect(() => {
    const selectPond = ponds.find(p=>p.name === 'Pond 1');
    setChartData(selectPond || null);
  }, [chartData, ponds]);
  
  // Load from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('harvestingData');
    if (saved) {
      setEntries(JSON.parse(saved));
    }
  }, []);

  // Save to localStorage
  useEffect(() => {
    localStorage.setItem('harvestingData', JSON.stringify(entries));
  }, [entries]);

  
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleChartChange = (e) => {
    setChartData({ ...chartData, [e.target.name]: e.target.value });
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const newEntry = { ...formData };
    if (!newEntry.pond || !newEntry.date || !newEntry.averageWeight || !newEntry.count) return;

    setEntries([newEntry, ...entries]);
    const prevHarvests = pond.harvests || [];
    const harvestNumber = prevHarvests.length + 1;
    const newHarvest = {
      harvestNumber: harvestNumber,
      date: newEntry.date,
      averageWeight: newEntry.averageWeight,
      count: newEntry.count
    }

    const updatedPond = {
      ...pond,
      harvests: newHarvest
    }
    const updatedPonds = ponds.map(p => p.name === pond.name ? updatedPond : p);
    localStorage.setItem('ponds', JSON.stringify(updatedPonds));
    {/* setFormData({
      pond: '',
      date: '',
      averageWeight: '',
      totalWeight: '',
      count: '',
      species: ''
      });*/}
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-semibold text-blue-900">Harvesting Tracker</h1>
      <h1>Pond: {chartData ? 'true' : 'false'}</h1>
      <form onSubmit={handleSubmit} className="space-y-4 bg-white p-4 shadow rounded mb-6">
        <div>
          <label className="text-lg font-semibold text-blue-800 mb-2">Pond</label>
          <select
            name="pond"
            value={formData.pond}
            onChange={handleChange}
            className="w-full border p-2 rounded text-sm text-blue-500"
          >
      <option value="">-- Select Pond --</option>
      {ponds.map((p) => (
          <option key={p.name} value={p.name}>{p.name}</option>
      ))}
          </select>
        </div>

        <div>
          <label className="text-lg font-semibold text-blue-800 mb-2">Harvesting Date</label>
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            className="w-full border p-2 rounded text-sm text-blue-500"
          />
        </div>

      <div>
          <label className="text-lg font-semibold text-blue-800 mb-2">Average Weight (kg)</label>
          <input
            type="number"
            name="averageWeight"
            value={formData.averageWeight}
            onChange={handleChange}
            className="w-full border p-2 rounded text-sm text-blue-500"
            placeholder="45"
          />
      </div>
      <div>
          <label className="text-lg font-semibold text-blue-800 mb-2">Total Weight (kg)</label>
          <input
            type="number"
            name="totalWeight"
            value={formData.totalWeight}
            onChange={handleChange}
            className="w-full border p-2 rounded text-sm text-blue-500"
            placeholder="45"
          />
        </div>

        <div>
          <label className="text-lg font-semibold text-blue-800 mb-2">Number of Fish Counted</label>
          <input
            type="number"
            name="count"
            value={formData.count}
            onChange={handleChange}
            className="w-full border p-2 rounded text-sm text-blue-500"
            placeholder="120"
          />
        </div>

        <button
          type="submit"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Save
        </button>
      </form>

      <div>
      <h2 className="text-xl font-semibold mb-2 text-gray-500">Harvesting History</h2>
      {entries.length === 0 ? (
          <p className="text-gray-500">No harvesting records yet.</p>
      ) : (
          <ul className="space-y-2">
          {entries.map((entry, index) => (
              <li key={index} className="bg-blue-50 border p-3 text-gray-500 rounded shadow-sm">
                <strong>{entry.pond}</strong> â€“ {entry.totalWeight}kg, {entry.count} fish<br />
              <span className="text-sm text-gray-500">{new Date(entry.date).toLocaleDateString()}</span>
              </li>
          ))}
        </ul>
      )}
    </div>
      <div>
      <h2 className="text-xl font-semibold mb-2 text-gray-500">Harvest Trends</h2>
      <div>
      <label className="text-lg font-semibold text-blue-800 mb-2">Pond</label>
      <select
    name="pond"
    value={chartData.pond}
    onChange={handleChartChange}
            className="w-full border p-2 rounded text-sm text-blue-500"
      >
      <option value="">-- Select Pond --</option>
      {ponds.map((p) => (
          <option key={p.name} value={p.name}>{p.name}</option>
      ))}
    </select>
      </div>
      <h1>selected: { chartData? 'true' : 'false'}</h1>
      {pond && <HarvestingChart entries={pond.harvests} />}
    </div>
      </div>
  );
}
